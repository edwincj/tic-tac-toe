{"version":3,"sources":["Components/Row.js","Components/Overlay.js","Components/PlayGround.js","App.js","index.js"],"names":["Row","props","rowNum","value","move","className","map","index","onClick","Overlay","content","newGame","restart","PlayGround","useState","gameState","setGamestate","player","setPlayer","result","setResult","overlayContent","moveHandler","x","y","newState","plr","useEffect","rowFlg","diagFlg","secDiagFlg","colFlg","prev","forEach","row","every","c","i","j","ele","console","log","App","gameId","setGameId","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5caa01b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Row = (props) => {\r\n  const { rowNum, value, move } = props;\r\n  return (\r\n    <div className=\"row\">\r\n      {value.map((value, index) => {\r\n        return (\r\n          <div\r\n            key={index}\r\n            className={\"column \" + (value === \"\" ? \"clickable\" : \"empty\")}\r\n            onClick={value === \"\" ? () => move(rowNum, index) : () => {}}\r\n          >\r\n            {value}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\n\r\nconst Overlay = ({ content, newGame }) => {\r\n  const restart = <button onClick={newGame}>Restart</button>;\r\n  return (\r\n    <div className=\"overlay\">\r\n      {content}\r\n      {restart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Overlay;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Row from \"./Row\";\r\nimport Overlay from \"./Overlay\";\r\n\r\nconst PlayGround = ({ newGame }) => {\r\n  const initial = [\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n    [\"\", \"\", \"\"],\r\n  ];\r\n  const [gameState, setGamestate] = useState(initial);\r\n  const [player, setPlayer] = useState(\"X\");\r\n  const [result, setResult] = useState(\"Active\");\r\n\r\n  const overlayContent =\r\n    result === \"Draw\" ? \"Game Drawn\" : \"Winner : \" + result;\r\n\r\n  const restart = <button onClick={newGame}>Restart</button>;\r\n\r\n  const moveHandler = (x, y) => {\r\n    const newState = [...gameState];\r\n    newState[x][y] = player;\r\n    setPlayer((plr) => {\r\n      if (plr === \"X\") return \"O\";\r\n      return \"X\";\r\n    });\r\n    setGamestate(newState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let rowFlg = false;\r\n    let diagFlg = true;\r\n    let secDiagFlg = true;\r\n    let colFlg = false;\r\n    let prev = \"X\";\r\n    if (player === \"X\") prev = \"O\";\r\n    gameState.forEach((row) => {\r\n      if (row.every((c) => c === prev)) {\r\n        rowFlg = true;\r\n        return false;\r\n      }\r\n    });\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      if (gameState[i][i] !== prev) {\r\n        diagFlg = false;\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      for (let j = 0; j < 3; j++) {\r\n        if (i + j === 2 && gameState[i][j] !== prev) secDiagFlg = false;\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < 3; i++) {\r\n      if (gameState.every((x) => x[i] === prev)) {\r\n        colFlg = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (colFlg || rowFlg || diagFlg || secDiagFlg) {\r\n      setResult(prev);\r\n    } else if (\r\n      gameState.every((row) => {\r\n        return row.every((ele) => ele !== \"\");\r\n      })\r\n    ) {\r\n      setResult(\"Draw\");\r\n    }\r\n    console.log(result);\r\n  }, [gameState, player, result]);\r\n\r\n  return (\r\n    <div className=\"playGround\">\r\n      {result !== \"Active\" && (\r\n        <Overlay content={overlayContent} newGame={newGame} />\r\n      )}\r\n      <div className=\"board\">\r\n        {gameState.map((row, index) => {\r\n          return (\r\n            <Row key={index} rowNum={index} value={row} move={moveHandler} />\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"footer\">\r\n        <div\r\n          className={player === \"X\" && result === \"Active\" ? \"current\" : \"wait\"}\r\n        >\r\n          X\r\n        </div>\r\n        <div>{result === \"Active\" && restart}</div>\r\n        <div\r\n          className={player === \"O\" && result === \"Active\" ? \"current\" : \"wait\"}\r\n        >\r\n          O\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayGround;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport PlayGround from \"./Components/PlayGround\";\n\nconst App = () => {\n  const [gameId, setGameId] = useState(1);\n  return <PlayGround key={gameId} newGame={() => setGameId((id) => id + 1)} />;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}